% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pyr6.r
\name{PythonEnv}
\alias{PythonEnv}
\title{Python Environment}
\description{
The Python Environment Class. Provides an interface to a Python process.
}
\section{Usage}{

\preformatted{py = PythonEnv$new(port, path)

py$start()

py$running
py$pid
py$path (py$path <-)
py$host (py$host <-)
py$port (py$port <-)
py$timeout (py$timeout <-)

py$exec(..., file = NULL)
py$set(...)
py$get(varname)

py$stop(force = FALSE)

print(py)
}
}

\section{Arguments}{

\code{port} The port to use for communication with Python.

\code{path} The path to the Python executable.

\code{varname} The name of a Python variable to bring into R.

\code{...} Commands to run or named variables to set in the Python process.

\code{file} File containing Python code to execute.

\code{force} If \code{TRUE}, force the Python process to terminate
using a system call.
}

\section{Methods}{

\code{$new()} Initialize a Python interface. The Python process is not
started automatically.

\code{$path} Set or get the path to the Python executable. The path
cannot be changed while the Python process is running.

\code{$host} Set or get the host address of the Python connection.
Default is \code{'localhost'}. The host cannot be changed while the
Python process is running.

\code{$port} Set or get the port of the Python interface. The port
cannot be changed while the Python process is running.

\code{$timeout} Set or get the timeout for receiving messages from
Python. Default is 60 seconds.

\code{$start()} Start the Python process. The Python process runs
asynchronously.

\code{$running} Check if the Python process is running.

\code{$pid} Get the Process ID of the Python interface. Useful for
diagnosing problems.

\code{$set()} Set variables in the Python process. R variables
are encoded into JSON format, sent to the Python process as text,
and decoded into variables on the Python side.

\code{$get()} Get a variable from the Python process. Python
variables are encoded into JSON format, sent to R as text,
and decoded into variables on the R side.

\code{$exec()} Execute the specified Python
commands and invisibly return printed Python output (if any).
Alternatively, the \code{file} argument can be used to specify
a file containing Python code. Note that there will be no return
value unless an explicit Python \code{print} statement is executed.

\code{$stop()} Stop the Python process by sending a request to the
Python process. If \code{force = TRUE}, the process will be
terminated using a system call instead.

\code{print(py)} Show some information about the
Python process on the screen, whether it is running and its process id,
etc.
}

\examples{
\dontrun{
pypath = Sys.which('python')
py = PythonEnv$new(path = pypath, port = 6011, host = "127.0.0.1")
py$start()
py$running
py$set(a = 5)
py$get('a')
py$stop(force = TRUE)
}
}
