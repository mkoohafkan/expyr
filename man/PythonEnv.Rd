% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pyr6.r
\name{PythonEnv}
\alias{PythonEnv}
\title{Python Environment}
\description{
The Python Environment Class. Provides an interface to a Python process.
}
\section{Usage}{

\preformatted{py = PythonEnv$new(port, path)

py$start
py$running
py$exec(...)
py$set(...)
py$get(varname)
py$stop
py$kill

print(py)
}
}

\section{Arguments}{

\code{port} The port to use for communication with Python.
\code{path} Path to the Python executable to use.
\code{varname} The name of a Python variable to bring into R.
\code{...} Commands to run or named variables to set in the Python process.
}

\section{Details}{

\code{$start} starts the Python process. The Python process runs 
  asynchronously.

\code{$running} checks if the Python process is running.

\code{$stop} Stops the Python process.

\code{$kill} Forcibly terminate the Python process. Useful when
  \code{$stop} fails or hangs.

\code{$set(...)} Set variables in the Python process. R variables
  are encoded into JSON format, sent to the Python process as text,
  and decoded into variables on the Python side.

\code{$get(varname)} Get a variable from the Python process. Python
  variables are encoded into JSON format, sent to R as text,
  and decoded into variables on the R side.

\code{print(py)} or \code{py$print()} shows some information about the
Python process on the screen, whether it is running and its process id, 
etc.
}

\examples{
\dontrun{
py <- PythonEnv$new(port = 6011, path = sys.which("python"))
p$is_alive()
p
p$kill()
p$is_alive()

p$restart()
p$is_alive()
Sys.sleep(3)
p$is_alive()
}
}
